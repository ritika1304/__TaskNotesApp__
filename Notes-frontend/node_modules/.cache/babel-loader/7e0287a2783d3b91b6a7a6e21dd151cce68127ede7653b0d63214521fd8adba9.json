{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\New\\\\NotesApp\\\\frontend\\\\src\\\\pages\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport API from '../api/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [editMode, setEditMode] = useState(false);\n  const [editNoteId, setEditNoteId] = useState(null);\n  const [editNoteContent, setEditNoteContent] = useState('');\n\n  // Fetch all notes\n  useEffect(() => {\n    const fetchNotes = async () => {\n      try {\n        const {\n          data\n        } = await API.get('/notes');\n        setNotes(data);\n      } catch (error) {\n        var _error$response;\n        console.error('Failed to fetch notes:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      }\n    };\n    fetchNotes();\n  }, []);\n\n  // Create a new note\n  const handleCreateNote = async () => {\n    if (!newNote.trim()) return alert('Note content cannot be empty.');\n    try {\n      const {\n        data\n      } = await API.post('/notes', {\n        content: newNote\n      });\n      setNotes(prev => [...prev, data]);\n      setNewNote('');\n    } catch (error) {\n      var _error$response2;\n      console.error('Failed to create note:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    }\n  };\n\n  // Delete a note\n  const handleDeleteNote = async id => {\n    try {\n      await API.delete(`/notes/${id}`);\n      setNotes(prev => prev.filter(note => note.id !== id));\n    } catch (error) {\n      var _error$response3;\n      console.error('Failed to delete note:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    }\n  };\n\n  // Enter edit mode\n  const handleEditNote = (id, content) => {\n    setEditMode(true);\n    setEditNoteId(id);\n    setEditNoteContent(content);\n  };\n\n  // Update note\n  const handleUpdateNote = async () => {\n    if (!editNoteContent.trim()) return alert('Note content cannot be empty.');\n    try {\n      const {\n        data\n      } = await API.put(`/notes/${editNoteId}`, {\n        content: editNoteContent\n      });\n      setNotes(prev => prev.map(note => note.id === editNoteId ? {\n        ...note,\n        content: data.content\n      } : note));\n      setEditMode(false);\n      setEditNoteId(null);\n      setEditNoteContent('');\n    } catch (error) {\n      var _error$response4;\n      console.error('Failed to update note:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-6\",\n      children: \"Your Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write a new note...\",\n        value: newNote,\n        onChange: e => setNewNote(e.target.value),\n        className: \"border p-2 w-full mb-2 rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateNote,\n        className: \"bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600\",\n        children: \"Add Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"p-4 mb-2 border rounded flex justify-between items-center\",\n        children: editMode && editNoteId === note.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editNoteContent,\n            onChange: e => setEditNoteContent(e.target.value),\n            className: \"border p-2 w-full rounded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleUpdateNote,\n            className: \"bg-green-500 text-white py-1 px-4 rounded mt-2 hover:bg-green-600\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditMode(false),\n            className: \"bg-gray-500 text-white py-1 px-4 rounded mt-2 hover:bg-gray-600 ml-2\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: note.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditNote(note.id, note.content),\n              className: \"bg-yellow-500 text-white py-1 px-4 rounded hover:bg-yellow-600\",\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteNote(note.id),\n              className: \"bg-red-500 text-white py-1 px-4 rounded hover:bg-red-600\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(DashboardPage, \"1JQqZ8HcEwEEv+dBI3zUj7jeTEI=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useEffect","useState","API","jsxDEV","_jsxDEV","Fragment","_Fragment","DashboardPage","_s","notes","setNotes","newNote","setNewNote","editMode","setEditMode","editNoteId","setEditNoteId","editNoteContent","setEditNoteContent","fetchNotes","data","get","error","_error$response","console","response","message","handleCreateNote","trim","alert","post","content","prev","_error$response2","handleDeleteNote","id","delete","filter","note","_error$response3","handleEditNote","handleUpdateNote","put","map","_error$response4","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/New/NotesApp/frontend/src/pages/DashboardPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport API from '../api/api';\r\n\r\nconst DashboardPage = () => {\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [editNoteId, setEditNoteId] = useState(null);\r\n    const [editNoteContent, setEditNoteContent] = useState('');\r\n\r\n    // Fetch all notes\r\n    useEffect(() => {\r\n        const fetchNotes = async () => {\r\n            try {\r\n                const { data } = await API.get('/notes');\r\n                setNotes(data);\r\n            } catch (error) {\r\n                console.error('Failed to fetch notes:', error.response?.data || error.message);\r\n            }\r\n        };\r\n        fetchNotes();\r\n    }, []);\r\n\r\n    // Create a new note\r\n    const handleCreateNote = async () => {\r\n        if (!newNote.trim()) return alert('Note content cannot be empty.');\r\n\r\n        try {\r\n            const { data } = await API.post('/notes', { content: newNote });\r\n            setNotes((prev) => [...prev, data]);\r\n            setNewNote('');\r\n        } catch (error) {\r\n            console.error('Failed to create note:', error.response?.data || error.message);\r\n        }\r\n    };\r\n\r\n    // Delete a note\r\n    const handleDeleteNote = async (id) => {\r\n        try {\r\n            await API.delete(`/notes/${id}`);\r\n            setNotes((prev) => prev.filter((note) => note.id !== id));\r\n        } catch (error) {\r\n            console.error('Failed to delete note:', error.response?.data || error.message);\r\n        }\r\n    };\r\n\r\n    // Enter edit mode\r\n    const handleEditNote = (id, content) => {\r\n        setEditMode(true);\r\n        setEditNoteId(id);\r\n        setEditNoteContent(content);\r\n    };\r\n\r\n    // Update note\r\n    const handleUpdateNote = async () => {\r\n        if (!editNoteContent.trim()) return alert('Note content cannot be empty.');\r\n\r\n        try {\r\n            const { data } = await API.put(`/notes/${editNoteId}`, { content: editNoteContent });\r\n            setNotes((prev) =>\r\n                prev.map((note) => (note.id === editNoteId ? { ...note, content: data.content } : note))\r\n            );\r\n            setEditMode(false);\r\n            setEditNoteId(null);\r\n            setEditNoteContent('');\r\n        } catch (error) {\r\n            console.error('Failed to update note:', error.response?.data || error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-6\">\r\n            <h2 className=\"text-2xl font-bold mb-6\">Your Notes</h2>\r\n\r\n            {/* Create Note Section */}\r\n            <div className=\"mb-6\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Write a new note...\"\r\n                    value={newNote}\r\n                    onChange={(e) => setNewNote(e.target.value)}\r\n                    className=\"border p-2 w-full mb-2 rounded\"\r\n                />\r\n                <button\r\n                    onClick={handleCreateNote}\r\n                    className=\"bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600\"\r\n                >\r\n                    Add Note\r\n                </button>\r\n            </div>\r\n\r\n            {/* Notes List */}\r\n            <ul>\r\n                {notes.map((note) => (\r\n                    <li\r\n                        key={note.id}\r\n                        className=\"p-4 mb-2 border rounded flex justify-between items-center\"\r\n                    >\r\n                        {editMode && editNoteId === note.id ? (\r\n                            <div className=\"flex-grow\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={editNoteContent}\r\n                                    onChange={(e) => setEditNoteContent(e.target.value)}\r\n                                    className=\"border p-2 w-full rounded\"\r\n                                />\r\n                                <button\r\n                                    onClick={handleUpdateNote}\r\n                                    className=\"bg-green-500 text-white py-1 px-4 rounded mt-2 hover:bg-green-600\"\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => setEditMode(false)}\r\n                                    className=\"bg-gray-500 text-white py-1 px-4 rounded mt-2 hover:bg-gray-600 ml-2\"\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                            </div>\r\n                        ) : (\r\n                            <>\r\n                                <span>{note.content}</span>\r\n                                <div className=\"space-x-2\">\r\n                                    <button\r\n                                        onClick={() => handleEditNote(note.id, note.content)}\r\n                                        className=\"bg-yellow-500 text-white py-1 px-4 rounded hover:bg-yellow-600\"\r\n                                    >\r\n                                        Edit\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => handleDeleteNote(note.id)}\r\n                                        className=\"bg-red-500 text-white py-1 px-4 rounded hover:bg-red-600\"\r\n                                    >\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}