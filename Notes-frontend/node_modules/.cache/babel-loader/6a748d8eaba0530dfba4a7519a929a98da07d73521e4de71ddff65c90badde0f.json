{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\New\\\\NotesApp\\\\frontend\\\\src\\\\pages\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport API from '../api/api'; // Import API to make requests\nimport Navbar from '../components/Navbar'; // Import the Navbar component\nimport NotesList from '../components/NotesList'; // Import the NotesList component\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for routing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const [notes, setNotes] = useState([]); // Store the fetched notes\n  const [user, setUser] = useState(null); // Store user information\n  const navigate = useNavigate(); // Initialize useNavigate for routing\n\n  // Fetch notes and user profile on initial load\n  useEffect(() => {\n    const fetchNotes = async () => {\n      try {\n        const {\n          data\n        } = await API.get('/notes'); // Get notes from API\n        setNotes(data); // Store notes in state\n      } catch (error) {\n        var _error$response;\n        console.error('Failed to fetch notes:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      }\n    };\n    const fetchUserProfile = async () => {\n      try {\n        const {\n          data\n        } = await API.get('/profile'); // Fetch user profile\n        setUser(data); // Set user data to state\n      } catch (error) {\n        var _error$response2;\n        console.error('Failed to fetch user profile:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      }\n    };\n    fetchNotes(); // Fetch notes when the page loads\n    fetchUserProfile(); // Fetch user data when the page loads\n  }, []);\n\n  // Create note handler (navigates to the NoteEditorPage to create a new note)\n  const handleCreateNote = () => {\n    navigate('/create-note'); // Redirect to Create Note page\n  };\n\n  // Delete note handler (deletes a note by id)\n  const handleDeleteNote = async noteId => {\n    try {\n      await API.delete(`/notes/${noteId}`); // Call API to delete the note\n      setNotes(notes.filter(note => note._id !== noteId)); // Remove the deleted note from state\n      alert('Note deleted successfully!'); // Show success alert\n    } catch (error) {\n      var _error$response3;\n      console.error('Failed to delete note:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      alert('Failed to delete note. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-6\",\n        children: \"Your Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateNote,\n        className: \"bg-blue-500 text-white py-2 px-4 rounded mb-4 hover:bg-blue-600\",\n        children: \"Create New Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NotesList, {\n        notes: notes,\n        onDelete: handleDeleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(DashboardPage, \"UcgcTbQr7Q6usrWZg7/q5IVJg1k=\", false, function () {\n  return [useNavigate];\n});\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useEffect","useState","API","Navbar","NotesList","useNavigate","jsxDEV","_jsxDEV","DashboardPage","_s","notes","setNotes","user","setUser","navigate","fetchNotes","data","get","error","_error$response","console","response","message","fetchUserProfile","_error$response2","handleCreateNote","handleDeleteNote","noteId","delete","filter","note","_id","alert","_error$response3","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/New/NotesApp/frontend/src/pages/DashboardPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport API from '../api/api'; // Import API to make requests\r\nimport Navbar from '../components/Navbar'; // Import the Navbar component\r\nimport NotesList from '../components/NotesList'; // Import the NotesList component\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for routing\r\n\r\nconst DashboardPage = () => {\r\n    const [notes, setNotes] = useState([]); // Store the fetched notes\r\n    const [user, setUser] = useState(null); // Store user information\r\n    const navigate = useNavigate(); // Initialize useNavigate for routing\r\n\r\n    // Fetch notes and user profile on initial load\r\n    useEffect(() => {\r\n        const fetchNotes = async () => {\r\n            try {\r\n                const { data } = await API.get('/notes'); // Get notes from API\r\n                setNotes(data); // Store notes in state\r\n            } catch (error) {\r\n                console.error('Failed to fetch notes:', error.response?.data || error.message);\r\n            }\r\n        };\r\n\r\n        const fetchUserProfile = async () => {\r\n            try {\r\n                const { data } = await API.get('/profile'); // Fetch user profile\r\n                setUser(data); // Set user data to state\r\n            } catch (error) {\r\n                console.error('Failed to fetch user profile:', error.response?.data || error.message);\r\n            }\r\n        };\r\n\r\n        fetchNotes(); // Fetch notes when the page loads\r\n        fetchUserProfile(); // Fetch user data when the page loads\r\n    }, []);\r\n\r\n    // Create note handler (navigates to the NoteEditorPage to create a new note)\r\n    const handleCreateNote = () => {\r\n        navigate('/create-note'); // Redirect to Create Note page\r\n    };\r\n\r\n    // Delete note handler (deletes a note by id)\r\n    const handleDeleteNote = async (noteId) => {\r\n        try {\r\n            await API.delete(`/notes/${noteId}`); // Call API to delete the note\r\n            setNotes(notes.filter((note) => note._id !== noteId)); // Remove the deleted note from state\r\n            alert('Note deleted successfully!'); // Show success alert\r\n        } catch (error) {\r\n            console.error('Failed to delete note:', error.response?.data || error.message);\r\n            alert('Failed to delete note. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Navbar */}\r\n            <Navbar user={user} />\r\n\r\n            {/* Main Content */}\r\n            <div className=\"p-6\">\r\n                <h2 className=\"text-2xl font-bold mb-6\">Your Notes</h2>\r\n                \r\n                {/* Create Note Button */}\r\n                <button\r\n                    onClick={handleCreateNote}\r\n                    className=\"bg-blue-500 text-white py-2 px-4 rounded mb-4 hover:bg-blue-600\"\r\n                >\r\n                    Create New Note\r\n                </button>\r\n\r\n                {/* List of Notes */}\r\n                <NotesList notes={notes} onDelete={handleDeleteNote} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}